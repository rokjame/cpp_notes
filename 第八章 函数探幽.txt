1、引用与指针：引用必须在声明时初始化，而不能像指针一样，先声明，再赋值。引用更接近于const指针，一旦与某个变量关联起来，就将一直效忠于它。
Int & rodents = rats;
实际上是下述代码的伪装表示：
Int * const pr = &rats;
2、如果程序员的意图是让函数使用传递给它的信息，而不对这些信息进行修改，同时又想使用引用，则应使用常量引用。
3、默认参数：默认参数指的是当函数调用中省略了实参时自动使用的一个值。必须使用函数原型才能设置默认参数，因为编译器通过查看原型来来哦姐函数所使用的参数数目。方法是将值赋给原型中的参数。
char * left(const char * str, int n = 1);
此时，n的值默认为1.
注意：必须从右往左添加默认值。即要为某个参数设置默认值，则必须为它右边的所有参数提供默认值.。
4、函数重载：通过函数的参数列表（也称为函数特征标）区分函数名相同的函数。①类型引用与类型本身视为同一个特征标（x 与 &x）②注意：是特征标不同导致函数重载，而不是函数的返回类型，因此具有相同特征标、不同返回值的函数并不能重载。③仅当函数执行相同的任务，但使用不同形式的数据时，才应使用函数重载。
5、函数模板P230：函数模板是通用的函数描述，使用泛型定义函数，其中的泛型可以用具体的类型如（int、double）替换。①模板并不创建任何函数，而只是告诉编译器如何定义函数，需要具体的数据类型时，编译器将按模板模式创建这样的函数。②并非所有的模板参数都必须时模板参数类型，也可以是具体的数据类型，如int。③函数模板也可以重载，只需特征标不同即可。④模板的局限性：编写的模板函数很可能无法处理某些数据，如数组a赋值给数组b、结构a与结构b比大小等。解决办法：重载相应的运算符、为特定类型提供具体化的模板P234。 
